// This service worker handles background notifications for Firebase Cloud Messaging.
// It's imported by the main PWA service worker generated by Vite.

// Using the same version as the project's firebase dependency for consistency.
importScripts('https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/10.12.2/firebase-messaging-compat.js');

// Your web app's Firebase configuration (must match your app's config).
const firebaseConfig = {
  apiKey: "AIzaSyDgrba11-ZmbE6f3BIYfNc_tKLv32osWuU",
  authDomain: "sakoonapp-9574c.firebaseapp.com",
  databaseURL: "https://sakoonapp-9574c-default-rtdb.asia-southeast1.firebasedatabase.app",
  projectId: "sakoonapp-9574c",
  storageBucket: "sakoonapp-9574c.appspot.com",
  messagingSenderId: "747287490572",
  appId: "1:747287490572:web:7053dc7758c622498a3e29",
  measurementId: "G-6VD83ZC2HP"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);

const messaging = firebase.messaging();

messaging.onBackgroundMessage((payload) => {
  console.log(
    "[firebase-messaging-sw.js] Received background message ",
    payload
  );
  
  const notificationTitle = payload.notification.title;
  const notificationOptions = {
    body: payload.notification.body,
    // You can use an icon from the notification payload or a default one.
    icon: payload.notification.image || "https://cdn-icons-png.flaticon.com/512/2966/2966472.png",
    // Extract actions and data from the webpush payload if they exist
    actions: payload.data?.actions ? JSON.parse(payload.data.actions) : undefined,
    data: payload.data,
  };

  self.registration.showNotification(notificationTitle, notificationOptions);
});

// Handle notification click events
self.addEventListener('notificationclick', (event) => {
  event.notification.close();

  const appUrl = new URL('/', self.location.origin).href;
  
  // Get data from the notification payload
  const view = event.notification.data?.view || '';
  const action = event.action; // e.g., 'call' or 'chat'
  
  let targetUrl = appUrl;
  
  // If the notification or action directs to the 'calls' view, set the URL
  if (action === 'call' || action === 'chat' || view === 'calls') {
      targetUrl = `${appUrl}?view=calls`;
  }
  
  // This looks for an existing window and focuses it, or opens a new one.
  event.waitUntil(
    clients.matchAll({ type: 'window', includeUncontrolled: true }).then((clientList) => {
      // Check if there's a window already open.
      for (const client of clientList) {
        if (client.url.startsWith(appUrl) && 'focus' in client) {
          // If we found a client, focus it and navigate it to the target URL.
          return client.navigate(targetUrl).then(c => c.focus());
        }
      }
      // If we didn't find a client, open a new one.
      if (clients.openWindow) {
        return clients.openWindow(targetUrl);
      }
    })
  );
});